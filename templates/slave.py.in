#!${buildout:bin-directory}/python
#-*- coding:utf-8 -*-

from urllib import urlencode
from urllib2 import urlopen, Request
from simplejson import loads
from xmlrpclib import Server
from base64 import b64encode, decodestring
from nsi.granulate import Granulate
from time import sleep

def work(delay=5):
    while True:
        request = Request("http://0.0.0.0:8886/q/to_granulate")
        response = urlopen(request)
        response_data = response.read()
        print response_data
        if loads(response_data):
            response_dict = loads(loads(response_data)["value"])
            video_uid = response_dict["video_uid"]
            grains_uid = response_dict["grains_uid"]
            print response_dict
            while not converted(video_uid):
                sleep(delay)
            granulate_video(video_uid, grains_uid)
        sleep(delay)

def granulate_video(video_uid, grains_uid):
    video = eval(get_from_sam(video_uid))['data']
    granulate = Granulate()
    grains = granulate.granulate('nothing.ogv', decodestring(video))
    encoded_grains = [b64encode(image.getContent().read()) for image in grains['image_list']]
    store_in_sam(grains_uid, {'grains':encoded_grains})

def converted(video_uid):
    video_converter = Server('http://${slaves:video_converter_host}:${slaves:video_converter_password}@localhost:${slaves:video_converter_port}/xmlrpc')
    return video_converter.done(video_uid)

def store_in_sam(uid, data):
    sam = Server("http://${slaves:sam_user}:${slaves:sam_password}@${slaves:sam_host}:${slaves:sam_port}/xmlrpc")
    return sam.update(uid, data)

def get_from_sam(uid):
    sam = Server("http://${slaves:sam_user}:${slaves:sam_password}@${slaves:sam_host}:${slaves:sam_port}/xmlrpc")
    return sam.get(uid)

if __name__ == '__main__':
    work()

